package nyt.util {	import flash.utils.Dictionary;		public class Delegate {				private static var delegates:Array = new Array();				/************************************************************************		*		*  returns a function that will be called within the scope of a		*  specified object with original (if append) and additional params		*		*************************************************************************/		public static function create(oTarget:Object,oFunction:Function,append:Boolean=true, ... args):Function {						var f:Function = check(oTarget,oFunction,append,args);						if(f != null) return f;						// create an array to hold new params			var oParams:Array = new Array();						for(var i:int=0; i<args.length; i++) {								oParams.push(args[i]);			}						// create delegate object			var d:Dictionary = new Dictionary(true);						d['oTarget'] = oTarget;			d['oParams'] = oParams;			d['oFunction'] = oFunction;			d['appendParams'] = append;						d['dFunction'] = function() {								var d:Object = arguments.callee.delegate;								return d['oFunction'].apply(d['oTarget'],((d['appendParams']) ? arguments.concat(d['oParams']) : d['oParams']));			}						// set a ref to the delegate object in the function itself			d['dFunction'].delegate = d;						delegates.push(d);						return d['dFunction'];		}				/************************************************************************		* 		*  gets a ref to a previously created delegate function (args as Array)		*		*************************************************************************/		private static function check(oTarget:Object,oFunction:Function,append:Boolean,args:Array):Function {						for(var i:int=0; i<delegates.length; i++) {								var d:Dictionary = delegates[i];								// target, function, and append match				if(d['oTarget'] == oTarget && d['oFunction'] == oFunction && d['appendParams'] == append) {										for(var j:int=0; j<args.length; j++) {												if(args[j] != d['oParams'][j]) break;					}										// all params match					if(j == args.length && j == d['oParams'].length) {											return d['dFunction'];					}				}			}						return null;		}						/************************************************************************		* 		*  gets a ref to a previously created delegate function		*		*************************************************************************/		public static function retrieve(oTarget:Object,oFunction:Function,append:Boolean, ... args):Function {						for(var i:int=0; i<delegates.length; i++) {								var d:Object = delegates[i];								// target, function, and append match				if(d['oTarget'] == oTarget && d['oFunction'] == oFunction && d['appendParams'] == append) {										for(var j:int=0; j<args.length; j++) {												if(args[j] != d['oParams'][j]) break;					}										// all params match					if(j == d['oParams'].length) {											return d['dFunction'];					}				}			}						return null;		}						/************************************************************************		* 		*  destroys a previously created delegate function		*		*************************************************************************/		public static function destroy(oTarget:Object,oFunction:Function,append:Boolean, ... args):Function {						for(var i:int=0; i<delegates.length; i++) {								var d:Object = delegates[i];								// target, function, and append match				if(d['oTarget'] == oTarget && d['oFunction'] == oFunction && d['appendParams'] == append) {										for(var j:int=0; j<args.length; j++) {												if(args[j] != d['oParams'][j]) break;					}										// all params match					if(j == d['oParams'].length) {												return delegates.splice(i,1)[0]['dFunction'];					}				}			}						return null;		}		} // end Delegate class}