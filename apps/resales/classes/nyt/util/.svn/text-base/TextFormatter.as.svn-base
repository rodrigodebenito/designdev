package nyt.util {		public class TextFormatter {				/************************************************************************		* returns a formatted time string from a number of seconds		*************************************************************************/		public static function formatSeconds(seconds:Number=0,seperator:String=":"):String {						seconds = Math.round(seconds);						if(seconds == 0) return "0"+seperator+"00";						var hrs:int = seconds/3600;			var mins:int = (seconds%3600)/60;			var secs:int = seconds%60;						var time:String = '';						if(hrs > 0) {								time = hrs + seperator;								if(mins < 10) time += "0";			}						if(secs < 10) time += mins+seperator+"0"+secs;			else time += mins+seperator+secs;						return time;		}				/************************************************************************		* returns a formatted dollar string		*************************************************************************/		public static function formatDollars(n:Number=0,incChange:Boolean=false,abbr:Boolean=false, decimalPlaces:int=1):String {						var nstr:String = Math.floor(Math.abs(n)).toString();			var mstr:String = "";			var cents:String = Math.round(Math.abs(n%1)*100).toString();			var negStr:String = (n < 0) ? "-" : "";						// add zero before single-digit cents			if(cents.length == 1) cents = "0"+cents;						var dollars:String = negStr+"$"+formatBigNumber(n,(abbr && !incChange), decimalPlaces);						return (incChange) ? dollars +"."+cents : dollars;		}				/************************************************************************		* formats a big number (large decimalPlaces values (8+) can cause probs)		*************************************************************************/		public static function formatBigNumber(n:Number=0,abbr:Boolean=false,decimalPlaces:int=1):String {						var suffix:String = "";						if(abbr) {								var num:Number = n;								if(n >= 1000000000000) {										suffix = "T";					num /= 1000000000000;				}								else if(n >= 1000000000) {										suffix = "B";					num /= 1000000000;				}								else if(n >= 1000000) {										suffix = "M";					num /= 1000000;				}								else if(n >= 1000) {										suffix = "K";					num /= 1000;				}								// add decimal places to abbreviation				var mod:int = Math.pow(10,decimalPlaces);									num = Math.round(num*mod)/mod;								return num + suffix;			}						var nstr:String = n.toString();			var fnum:String = "";						var decimalPos:int = nstr.indexOf(".");			var pastDecimal:Boolean = (decimalPos < 0);			var i:int = (decimalPos >= 0 && decimalPos+decimalPlaces < nstr.length-1) ? decimalPos+decimalPlaces : nstr.length-1;			var pos:int = 0;						while(i >= 0) {								var cChar:String = nstr.charAt(i);								if(decimalPos >= 0 && !pastDecimal) {										if(cChar == ".") pastDecimal = true;										fnum = cChar + fnum;				}								else {									fnum = cChar + fnum;										if(pos == 2) {												fnum = "," + fnum;												pos = 0;					}									else pos++;				}								i--;			}						return fnum;		}				/************************************************************************		* trims leading and trailing whitespace from a string		*************************************************************************/		public static function trim(str:String):String {						// TO DO						return str;		}	}}