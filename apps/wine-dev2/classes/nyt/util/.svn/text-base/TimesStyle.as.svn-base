package nyt.util{	import flash.text.TextField;	import flash.text.TextFormat;	 	public class TimesStyle {  		public static const DAYS:Array = new Array("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday");	public static const DAYS_ABBR:Array = new Array("Sun.","Mon.","Tue.","Wed.","Thu.","Fri.","Sat.");	public static const MONTHS:Array = new Array("January","February","March","April","May","June","July","August","September","October","November","December");	public static const MONTHS_ABBR:Array = new Array("Jan.","Feb.","March","April","May","June","July","Aug.","Sept.","Oct.","Nov.","Dec.");	  	public static var NYT_BLUE:uint = 0x004276; // Hasselhoff  	public static var NYT_LIGHT_BLUE:uint = 0x99B5CD;   	public static var DEMOCRAT_BLUE:uint = 0x405695;   	public static var REPUBLICAN_RED:uint = 0xB43030;   	public static var ARTICLE_SPAN_CREDIT_FORMAT:TextFormat = new TextFormat("Arial",9,0x808080,null,null,null,null,null,"right");  	public static var ARTICLE_SPAN_CAPTION_FORMAT:TextFormat = new TextFormat("Arial",11,0x666666,null,null,null,null,null,"left");  	  			 	public static var STATE_NAMES:Array = [ 								  {abbr: "AK", name: "Alaska", style:"Alaska"},  								  {abbr: "AL", name: "Alabama", style:"Ala."}, 								  {abbr: "AR", name: "Arkansas", style:"Ark."}, 								  {abbr: "AZ", name: "Arizona", style:"Ariz."}, 								  {abbr: "CA", name: "California", style:"Calif."}, 								  {abbr: "CO", name: "Colorado", style:"Colo."}, 								  {abbr: "CT", name: "Connecticut", style:"Conn."}, 								  {abbr: "DE", name: "Delaware", style:"Del."}, 								  {abbr: "FL", name: "Florida", style:"Fla."}, 								  {abbr: "GA", name: "Georgia", style:"Ga."}, 								  {abbr: "HI", name: "Hawaii", style:"Hawaii"}, 								  {abbr: "IA", name: "Iowa", style:"Iowa"}, 								  {abbr: "ID", name: "Idaho", style:"Idaho"}, 								  {abbr: "IL", name: "Illinois", style:"Ill."}, 								  {abbr: "IN", name: "Indiana", style:"Ind."}, 								  {abbr: "KS", name: "Kansas", style:"Kan."}, 								  {abbr: "KY", name: "Kentucky", style:"Ky."}, 								  {abbr: "LA", name: "Louisiana", style:"La."}, 								  {abbr: "MA", name: "Massachusetts", style:"Mass."}, 								  {abbr: "MD", name: "Maryland", style:"Md."}, 								  {abbr: "ME", name: "Maine", style:"Me."}, 								  {abbr: "MI", name: "Michigan", style:"Mich."}, 								  {abbr: "MN", name: "Minnesota", style:"Minn."}, 								  {abbr: "MS", name: "Mississippi", style:"Miss."}, 								  {abbr: "MO", name: "Missouri", style:"Mo."}, 								  {abbr: "MT", name: "Montana", style:"Mont."}, 								  {abbr: "NC", name: "North Carolina", style:"N.C."}, 								  {abbr: "ND", name: "North Dakota", style:"N.D."}, 								  {abbr: "NE", name: "Nebraska", style:"Neb."}, 								  {abbr: "NH", name: "New Hampshire", style:"N.H."}, 								  {abbr: "NJ", name: "New Jersey", style:"N.J."}, 								  {abbr: "NM", name: "New Mexico", style:"N.M."}, 								  {abbr: "NV", name: "Nevada", style:"Nev."}, 								  {abbr: "NY", name: "New York", style:"N.Y."}, 								  {abbr: "OH", name: "Ohio", style:"Ohio"}, 								  {abbr: "OK", name: "Oklahoma", style:"Okla."}, 								  {abbr: "OR", name: "Oregon", style:"Ore."}, 								  {abbr: "PA", name: "Pennsylvania", style:"Pa."}, 								  {abbr: "RI", name: "Rhode Island", style:"R.I."}, 								  {abbr: "SC", name: "South Carolina", style:"S.C."}, 								  {abbr: "SD", name: "South Dakota", style:"S.D."}, 								  {abbr: "TN", name: "Tennessee", style:"Tenn."}, 								  {abbr: "TX", name: "Texas", style:"Tex."}, 								  {abbr: "UT", name: "Utah", style:"Utah"}, 								  {abbr: "VA", name: "Virginia", style:"Va."},								  {abbr: "VT", name: "Vermont", style:"Vt."}, 								  {abbr: "WA", name: "Washington", style:"Wash."}, 								  {abbr: "WI", name: "Wisconsin", style:"Wis."}, 								  {abbr: "WV", name: "West Virginia", style:"W.Va."}, 								  {abbr: "WY", name: "Wyoming", style:"Wyo."} ]; 		  		public static var DATELINE_CITIES:Array = new Array(			"albany", "albuquerque", "algiers", "amsterdam", "anchorage","athens","atlanta","atlantic city","baghdad",			"baltimore","bangkok","beijing","berlin","boston","brasília","brussels","budapest","buenos aires","buffalo",			"cairo","calcutta","cape town","chicago","cincinnati","cleveland","colorado springs","copenhagen","dallas",			"denver","des moines","detroit","djibouti","dublin","edinburgh","el paso","fort worth","frankfurt","geneva",			"gibraltar","glasgow","guatemala city","hartford","havana","hollywood","hong kong","honolulu","houston",			"indianapolis","iowa city","istanbul","jersey city","jerusalem","johannesburg","kuwait","las vegas","lisbon",			"london","los angeles","luxembourg 	macao","madrid","manila","memphis","mexico city","miami","miami beach",			"milan","milwaukee","minneapolis","monaco","montreal","moscow","munich","nashville","new delhi","new haven",			"new orleans","newark","oklahoma city","omaha","oslo","ottawa","panama","paris","philadelphia","phoenix",			"pittsburgh","prague","quebec","rio de janeiro","rochester","rome","sacramento","salt lake city","san antonio",			"san diego","san francisco","san marino","san salvador","seattle","shanghai","singapore","st. louis","st. paul",			"stockholm","syracuse","tehran","tel aviv","the hague","tokyo","toronto","trenton","tucson","tunis",			"vatican city","venice","vienna","virginia beach","warsaw","washington","white plains","yonkers","zurich"		);		 		 		// handles stupid font stuff 		public static function getEmbeddedTF(txt:String = null, tf:TextFormat = null):TextField { 			var t:TextField = new TextField(); 			t.embedFonts = true;			t.antiAliasType = "advanced";			t.autoSize = "right";			if (txt) t.text = txt;			if (tf) t.setTextFormat(tf);			if (txt) { 				t.height = t.textHeight;			}			return t; 		} 		 		 		// returns the appropriate timesStyle name for a state that follows a city name, etc.		public static function tsState(state:String):String {			for (var i:int = 0; i<STATE_NAMES.length; i++) {				if (STATE_NAMES[i].name.toLowerCase() == state.toLowerCase() ||					STATE_NAMES[i].abbr.toLowerCase() == state.toLowerCase() ) {					//trace ("found" + STATE_NAMES[i].abbr.toLowerCase());					return STATE_NAMES[i].style;				}			}						trace("ERROR State " + state + " not found!");			return null;		}				public static function isDatelineCity(city:String):Boolean {			city = city.toLowerCase();			for (var i:int = 0; i<DATELINE_CITIES.length; i++) {				if (DATELINE_CITIES[i] == city) {					return true;				}			}			return false;		} 		 		// code stolen from Matt Bloc 		// Converts a Number into a formatted string. 		// Formatting: 0 or more decimal places, comma-delimited thousands		// Returns empty string for non-numeric input.		// Assumes a non-negative integer as the decimals argument, if present.		//		static public function formatNumber( n:Number, decimals:Number = 0 ):String {			// handle non-numeric value			if ( isNaN( n ) ) {				return "";			}			// get integer and decimal parts of the number			var iPart_str:String = "";				var dPart_str:String = "";				var rawDigits:Number = 0;			if ( decimals > 0 ) {				var pow10:Number = Math.pow( 10, decimals ); // power of 10 for shifting decimals into integer range, for rounding.				var sugar:Number = 0.0000001; // this avoids floating point rounding errors in next step (e.g., 1.005 rounding to 1.00 not 1.01)				rawDigits = Math.round( Math.abs( n ) * pow10 + sugar  );				iPart_str = String( Math.floor( rawDigits / pow10));				dPart_str = String( rawDigits % pow10);				// left-pad the decimal string, if needed				while ( dPart_str.length < decimals ) {					dPart_str = "0" + dPart_str;				}				dPart_str = "." + dPart_str;			}			else {				rawDigits = Math.round( Math.abs( n ));				iPart_str = String( rawDigits );			}					// get sign string			var sign_str:String = (n < 0 && rawDigits > 0) ? "-" : ""; // make sure -0.1 doesn't round to "-0"						// add "," as thousands delimiter if needed			if ( iPart_str.length > 3 ) {				var count:Number = iPart_str.length;  // number of unprocessed digits				var delimited_str:String = "";				while( count > 3 ) {					delimited_str = "," + iPart_str.substr( count-3 , 3 ) + delimited_str;					count -= 3;				}				iPart_str = iPart_str.substr( 0, count ) + delimited_str;			}						// return formatted number			return sign_str + iPart_str + dPart_str;		} 		 			}}